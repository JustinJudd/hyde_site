#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.5 on Sun Feb 17 16:59:31 2013

import wx

from wx.lib.mixins.listctrl import CheckListCtrlMixin, ListCtrlAutoWidthMixin
import os
import sys
import PIL.Image
from PIL.ExifTags import TAGS
from PIL import Image, ImageDraw, ImageFont
from math import atan, degrees
from datetime import datetime
from string import Template



album_template = Template("""---
title: $album_name
description: >
    $album_description
extends: album.j2
default_block: test
listable: false
album_cover: $album_cover
---""")

meta_template = Template("""extends: photo.j2
default_block: post
listable: true
album_cover: $album_cover
title: $album_name
description: >
    $album_description""")

photo_template = Template("""---
title: $photo_name
description: >
    $photo_summary
created: !!timestamp '$photo_timestamp'
tags:
$photo_tags
image: $image_name
---
{% mark image -%}
$photo_image
{%- endmark %}
{% mark excerpt -%}
$photo_description
{%- endmark %}""")

FONT = "/usr/share/fonts/truetype/droid/DroidSans.ttf"
web_basewidth = 640
high_basewidth = 1920
media_dir = 'media'
gallery_dir = 'photos'

# begin wxGlade: extracode
# end wxGlade


class AlbumCreator(wx.Frame):
    def __init__(self, *args, **kwds):
        self.album = Album(self)

        # begin wxGlade: AlbumCreator.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        self.file = wx.Menu()
        self.new_album = wx.MenuItem(self.file, wx.NewId(), "New Album", "", wx.ITEM_NORMAL)
        self.file.AppendItem(self.new_album)
        self.add_subalbum = wx.MenuItem(self.file, wx.NewId(), "Add Subalbum", "", wx.ITEM_NORMAL)
        self.file.AppendItem(self.add_subalbum)
        self.file.AppendSeparator()
        self.quit = wx.MenuItem(self.file, wx.NewId(), "Quit", "", wx.ITEM_NORMAL)
        self.file.AppendItem(self.quit)
        self.frame_menubar.Append(self.file, "File")
        self.help = wx.Menu()
        self.about = wx.MenuItem(self.help, wx.NewId(), "About", "", wx.ITEM_NORMAL)
        self.help.AppendItem(self.about)
        self.frame_menubar.Append(self.help, "Help")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.album_panel = AlbumPanel(self, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.create_album, self.new_album)
        self.Bind(wx.EVT_MENU, self.create_subalbum, self.add_subalbum)
        self.Bind(wx.EVT_MENU, self.quit_app, self.quit)
        self.Bind(wx.EVT_MENU, self.open_about, self.about)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: AlbumCreator.__set_properties
        self.SetTitle("Album Creator")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AlbumCreator.__do_layout
        frame_sizer = wx.BoxSizer(wx.VERTICAL)
        frame_sizer.Add(self.album_panel, 1, wx.EXPAND, 0)
        self.SetSizer(frame_sizer)
        frame_sizer.Fit(self)
        self.Layout()
        # end wxGlade

    def create_album(self, event):  # wxGlade: AlbumCreator.<event_handler>
        new_album_dialog = NewAlbumDialog(self)
        new_album_dialog.Show()

    def create_subalbum(self, event):  # wxGlade: AlbumCreator.<event_handler>
        add_subalbum_dialog = AddSubalbumDialog(self)
        add_subalbum_dialog.Show()

    def quit_app(self, event):  # wxGlade: AlbumCreator.<event_handler>
        self.Destroy()

    def open_about(self, event):  # wxGlade: AlbumCreator.<event_handler>
        info = wx.AboutDialogInfo()
        info.SetName('Hyde Album Creator')
        info.SetVersion('Beta')
        description = """ Hyde Album Creator is used to create all of the files needed for my(Justin Judd) album templates for the Hyde static site generation tool."""
        info.SetDescription(description)
        info.SetCopyright('(C) 2013 Justin Judd')
        info.SetWebSite('http://www.justinjudd.org')
        #info.SetLicence(licence)
        info.AddDeveloper('Justin Judd')
        #info.AddDocWriter('Justin Judd')
        #info.AddArtist('Justin Judd')
        wx.AboutBox(info)

    def album_changed(self, album=None):
        if album:
            self.album = album
        self.album_panel.album_changed()

# end of class AlbumCreator


class AlbumPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        self.parent = args[0]
        self.photo_index = 0 
        self.manually_set_item_state = False

        # begin wxGlade: AlbumPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        img = wx.EmptyImage(640,480)
        img.Replace(0,0,0,105,105,105)

        self.album_name_label = wx.StaticText(self, -1, "Album Name:")
        self.album_name_text = wx.StaticText(self, -1, "This Album Name")
        self.album_description_label = wx.StaticText(self, -1, "Album Description:")
        self.album_description_text = wx.StaticText(self, -1, "This Album Description")
        self.selected_album_cover_label = wx.StaticText(self, -1, "Selected Album Cover:")
        self.album_cover_image = wx.StaticBitmap(self, -1, wx.BitmapFromImage(img))

        #self.photos_list_ctrl = wx.ListCtrl(self, -1, style=wx.LC_REPORT | wx.LC_SINGLE_SEL | wx.SUNKEN_BORDER)
        self.photos_list_ctrl = CheckListCtrl(self)
        self.photos_list_ctrl.InsertColumn(0,'Album Cover')
        #self.photos_list_ctrl.InsertColumn(1,'Image Location', width=140)
        self.photos_list_ctrl.InsertColumn(1,'Image FileName', width=140)
        self.photos_list_ctrl.InsertColumn(2,'Photo Name')

        self.submit_button = wx.Button(self, -1, "Save Album")
        self.photo_image = wx.StaticBitmap(self, -1, wx.BitmapFromImage(img))
        self.prev_photo_button = wx.Button(self, -1, "Previous photo")
        self.next_photo_button = wx.Button(self, -1, "Next photo")
        self.photo_name_label = wx.StaticText(self, -1, "Photo Name:")
        self.photo_name_text = wx.TextCtrl(self, -1, "")
        self.photo_summary_label = wx.StaticText(self, -1, "Photo Summary:")
        self.photo_summary_text = wx.TextCtrl(self, -1, "")
        self.photo_description_label = wx.StaticText(self, -1, "Photo Description(Can use Markdown):")
        self.photo_description_text = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)
        self.photo_tags_label = wx.StaticText(self, -1, "Photo Tags:")
        self.tag_list_box = wx.ListBox(self, -1, choices=[], style=wx.LB_MULTIPLE)
        self.add_tag_button = wx.Button(self, -1, "+")
        self.remove_tag_button = wx.Button(self, -1, "-")
        self.album_cover_checkbox = wx.CheckBox(self, -1, "Set photo as album cover?")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.save_album, self.submit_button)
        self.Bind(wx.EVT_BUTTON, self.move_to_previous_photo, self.prev_photo_button)
        self.Bind(wx.EVT_BUTTON, self.move_to_next_photo, self.next_photo_button)
        self.Bind(wx.EVT_BUTTON, self.add_tag, self.add_tag_button)
        self.Bind(wx.EVT_BUTTON, self.remove_tag, self.remove_tag_button)
        self.Bind(wx.EVT_CHECKBOX, self.album_cover_checked, self.album_cover_checkbox)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.onItemSelected, self.photos_list_ctrl)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: AlbumPanel.__set_properties
        self.album_cover_image.SetMinSize((150, 100))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AlbumPanel.__do_layout
        album_panel_sizer = wx.BoxSizer(wx.HORIZONTAL)
        photo_details_sizer = wx.BoxSizer(wx.VERTICAL)
        photo_tags_button_sizer = wx.BoxSizer(wx.HORIZONTAL)
        photo_display_sizer = wx.BoxSizer(wx.VERTICAL)
        photo_navigation_sizer = wx.BoxSizer(wx.HORIZONTAL)
        navigation_buffer_sizer = wx.BoxSizer(wx.HORIZONTAL)
        album_details_sizer = wx.BoxSizer(wx.VERTICAL)
        album_details_sizer.Add(self.album_name_label, 0, wx.ALL, 2)
        album_details_sizer.Add(self.album_name_text, 0, wx.ALL | wx.ALIGN_RIGHT | wx.ALIGN_CENTER_HORIZONTAL, 2)
        album_details_sizer.Add(self.album_description_label, 0, wx.ALL, 2)
        album_details_sizer.Add(self.album_description_text, 0, wx.ALL | wx.ALIGN_RIGHT | wx.ALIGN_CENTER_HORIZONTAL, 2)
        album_details_sizer.Add(self.selected_album_cover_label, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 3)
        album_details_sizer.Add(self.album_cover_image, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        album_details_sizer.Add(self.photos_list_ctrl, 2, wx.EXPAND, 0)
        album_details_sizer.Add(self.submit_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        album_panel_sizer.Add(album_details_sizer, 0, wx.ALL | wx.EXPAND, 3)
        photo_display_sizer.Add(self.photo_image, 0, 0, 0)
        photo_navigation_sizer.Add(self.prev_photo_button, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 20)
        photo_navigation_sizer.Add(navigation_buffer_sizer, 1, wx.EXPAND, 0)
        photo_navigation_sizer.Add(self.next_photo_button, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_RIGHT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 20)
        photo_display_sizer.Add(photo_navigation_sizer, 1, wx.EXPAND, 0)
        album_panel_sizer.Add(photo_display_sizer, 1, wx.EXPAND, 0)
        photo_details_sizer.Add(self.photo_name_label, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 5)
        photo_details_sizer.Add(self.photo_name_text, 0, wx.LEFT | wx.RIGHT | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 10)
        photo_details_sizer.Add(self.photo_summary_label, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 5)
        photo_details_sizer.Add(self.photo_summary_text, 0, wx.LEFT | wx.RIGHT | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 10)
        photo_details_sizer.Add(self.photo_description_label, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 5)
        photo_details_sizer.Add(self.photo_description_text, 1, wx.LEFT | wx.RIGHT | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 10)
        photo_details_sizer.Add(self.photo_tags_label, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 5)
        photo_details_sizer.Add(self.tag_list_box, 0, wx.LEFT | wx.RIGHT | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 10)
        photo_tags_button_sizer.Add(self.add_tag_button, 0, wx.LEFT | wx.RIGHT, 25)
        photo_tags_button_sizer.Add(self.remove_tag_button, 0, wx.LEFT | wx.RIGHT, 25)
        photo_details_sizer.Add(photo_tags_button_sizer, 0, wx.EXPAND, 0)
        photo_details_sizer.Add(self.album_cover_checkbox, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 8)
        album_panel_sizer.Add(photo_details_sizer, 0, wx.EXPAND, 0)
        self.SetSizer(album_panel_sizer)
        album_panel_sizer.Fit(self)
        # end wxGlade

    def save_album(self, event):  # wxGlade: AlbumPanel.<event_handler>
        self.parent.album.generate()

    def move_to_previous_photo(self, event):  # wxGlade: AlbumPanel.<event_handler>
        self.slide_photo(-1)

    def move_to_next_photo(self, event):  # wxGlade: AlbumPanel.<event_handler>
        self.slide_photo(1)

    def slide_photo(self,change):
        self.save_photo_data()
        self.update_photo_image( (self.photo_index + change) % len(self.parent.album.photos) )

    def album_changed(self):
        if self.parent.album:
            album = self.parent.album
            self.album_name_text.SetLabel(album.get_name())
            self.album_description_text.SetLabel(album.get_description())
            self.photos_list_ctrl.DeleteAllItems()
            self.photos_list_ctrl.add_photos(album)
            img = album.photos[0].get_wx_image()
            width = img.GetWidth()
            height = img.GetHeight()
            ratio = width/640
            new_height = height/ratio
            img = img.Scale(640,new_height)
            self.photo_image.SetBitmap( wx.BitmapFromImage(img) )

    def album_cover_changed(self, index):
        cover = self.parent.album.photos[index]
        img = cover.get_wx_image()
        width = img.GetWidth()
        height = img.GetHeight()
        ratio = float(width/150)
        new_height = int( float(height)/ratio)
        img = img.Scale(150,new_height)

        self.album_cover_image.SetBitmap( wx.BitmapFromImage(img) )
        self.Refresh()

        self.parent.album.set_cover(index)

        self.album_cover_checkbox.SetValue(self.photo_index == index)

        self.photos_list_ctrl.set_active(index)            


    def update_photo_image(self, index):
        self.photo_index = index
        photo = self.parent.album.photos[index]
        img = photo.get_wx_image()
        width = img.GetWidth()
        height = img.GetHeight()
        ratio = width/640
        new_height = height/ratio
        img = img.Scale(640,new_height)
        self.photo_image.SetBitmap( wx.BitmapFromImage(img) )
        #print wx.LIST_STATE_FOCUSED
        self.photo_name_text.SetValue( photo.get_name() )
        self.photo_summary_text.SetValue( photo.get_summary() )
        self.photo_description_text.SetValue( photo.get_description() )
        self.album_cover_checkbox.SetValue( self.parent.album.get_cover() == index )
        self.tag_list_box.Clear()
        for t in photo.get_tags():
            self.tag_list_box.Append(t)

        #this triggers onItemSelected in list control, which triggers this, leave as last step
        self.manually_set_item_state = True
        self.photos_list_ctrl.SetItemState( index, wx.LIST_STATE_FOCUSED|wx.LIST_STATE_SELECTED, wx.LIST_STATE_FOCUSED|wx.LIST_STATE_SELECTED )
        

    def onItemSelected(self, event):
        if self.manually_set_item_state:
            self.manually_set_item_state = False
            return
        self.save_photo_data()
        self.update_photo_image(event.m_itemIndex)

    def add_tag(self, event):  # wxGlade: AlbumPanel.<event_handler>
        dlg = wx.TextEntryDialog(self, 'Add tags, each tag seperated by a space','Add Tags')
  
        if dlg.ShowModal() == wx.ID_OK:
            tags = dlg.GetValue().split(" ")
            #self.tag_list_box.InsertItems( tags, self.tag_list_box.GetCount()   )
            for t in tags:
                self.tag_list_box.Append(t)
        dlg.Destroy()

    def remove_tag(self, event):  # wxGlade: AlbumPanel.<event_handler>
        for t in  reversed( self.tag_list_box.GetSelections() ):
            self.tag_list_box.Delete( t )

    def album_cover_checked(self, event):  # wxGlade: AlbumPanel.<event_handler>
        self.album_cover_checkbox.SetValue(True)
        if event.IsChecked():
            self.album_cover_changed(self.photo_index)

    def save_photo_data(self):
        #Save photo name
        photo_name = self.photo_name_text.GetValue()
        photo_description = self.photo_description_text.GetValue()
        photo_summary = self.photo_summary_text.GetValue()
        photo = self.parent.album.photos[self.photo_index]
        if photo_name:
            photo.set_name(photo_name)
            self.photos_list_ctrl.SetStringItem(self.photo_index, 2, photo_name)
        if photo_description:
            photo.set_description(photo_description)
        if photo_summary:
            photo.set_summary(photo_summary)
        photo.add_tags( [self.tag_list_box.GetString(x) for x in range(self.tag_list_box.GetCount() ) ] )
        print photo
        print photo.get_tags()
        #save photo description

# end of class AlbumPanel

class CheckListCtrl(wx.ListCtrl, CheckListCtrlMixin, ListCtrlAutoWidthMixin):
    def __init__(self, parent):
        wx.ListCtrl.__init__(self, parent, -1, style=wx.LC_REPORT | wx.LC_SINGLE_SEL | wx.SUNKEN_BORDER)
        CheckListCtrlMixin.__init__(self)
        ListCtrlAutoWidthMixin.__init__(self)
        self.photos = []
        self.active_index = None
        self.parent = parent

    def add_photos(self, album):
        #self.album = album
        for p in album.photos:
            index = self.InsertStringItem(sys.maxint, '')
            #self.SetStringItem(index, 1, p.location)
            self.SetStringItem(index, 1, os.path.split(p.location)[1])
            self.SetStringItem(index, 2, p.name)
            """
            index = self.album_panel.photos_list_ctrl.InsertStringItem(sys.maxint, p.location)
            self.album_panel.photos_list_ctrl.SetStringItem(index, 1, p.name)
            """
        self.active_index = 0

        self.CheckItem(self.active_index, True)
        self.SetItemState( self.active_index, wx.LIST_STATE_FOCUSED|wx.LIST_STATE_SELECTED, wx.LIST_STATE_FOCUSED|wx.LIST_STATE_SELECTED )



    def OnCheckItem(self, index, flag):
        self.parent.album_cover_changed(index)
        #self.set_active(index)

    def set_active(self, index):
        if self.active_index != index:
            self.SetItemImage(self.active_index, False)
        self.active_index = index
        self.SetItemImage(self.active_index, True)

class BaseAlbumDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        self.parent = args[0]
        self.photo_files = []
        self.album = None


        # begin wxGlade: NewAlbumDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.album_name_label = wx.StaticText(self, -1, "Album Name:")
        self.album_name_text = wx.TextCtrl(self, -1, "")
        self.album_description_label = wx.StaticText(self, -1, "Album Description:")
        self.album_description_text = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)
        self.album_location_label = wx.StaticText(self, -1, "Hyde Content Location:")
        self.album_location_text = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.set_album_location_button = wx.Button(self, -1, "Set Hyde Location")
        self.photos_list_box = wx.ListBox(self, -1, choices=[])
        self.add_photos_button = wx.Button(self, -1, "Add Photos")
        self.setup_album_button = wx.Button(self, -1, "Create Album")

        
        # end wxGlade

    def start_layout(self):
        self._set_properties()
        self._do_layout()

        self.Bind(wx.EVT_BUTTON, self.set_album_location, self.set_album_location_button)
        self.Bind(wx.EVT_BUTTON, self.add_photos, self.add_photos_button)
        self.Bind(wx.EVT_BUTTON, self.create_album, self.setup_album_button)


    def set_album_location(self, event):  # wxGlade: NewAlbumDialog.<event_handler>
        dir_dialog = wx.DirDialog(self, "Choose directory where photo album should be created:", style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dir_dialog.ShowModal() == wx.ID_OK:
            self.album_path = dir_dialog.GetPath()
            self.album_location_text.SetValue(self.album_path)
        dir_dialog.Destroy()

    def add_photos(self, event):  # wxGlade: NewAlbumDialog.<event_handler>
        filters = 'Image Files (*.jpg)|*.jpg;*.JPG'
        file_dialog = wx.FileDialog(self, "Choose photos", '/'.join(os.getcwd().split('/')[0:-1]), "", filters, wx.OPEN|wx.MULTIPLE)
        if file_dialog.ShowModal() == wx.ID_OK:
            new_photos = file_dialog.GetPaths()
            self.photo_files.extend( new_photos )
            self.photos_list_box.InsertItems(new_photos,0)

        file_dialog.Destroy()

    def create_album(self, event):  # wxGlade: NewAlbumDialog.<event_handler>
        if not self.validate_album():
            return

        self.Hide()
        #busyDlg = wx.BusyInfo("Please wait a moment while all of the images are imported.", self)
        self.progress = wx.ProgressDialog("Importing Images", "Please wait while the images are being imported", maximum = len(self.photo_files),parent=self, 
                                style = wx.PD_CAN_ABORT| wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME |  wx.PD_REMAINING_TIME )
        self.setup_album()

        self.setup_photos()

        self.parent.album_changed(self.album)
        wx.Yield()
        #busyDlg.Destroy()
        self.progress.Destroy()

        self.Destroy()

    def setup_album(self):
        self.album = Album( self.parent, self.album_name_text.GetValue(), self.album_location_text.GetValue() )
        self.album.set_description( self.album_description_text.GetValue() )

    def setup_photos(self):
        count = 0
        for p in self.photo_files:
            count += 1
            self.progress.Update(count)
            wx.Yield()
            photo = Photo(self.album, p)
            self.album.add_photo(photo)

    def get_validation(self):
        message = ""
        #test album name
        if not self.album_name_text.GetValue() or not len(self.album_name_text.GetValue()):
            message += "Album Name not set\n"
        if not self.album_location_text.GetValue() or not len(self.album_location_text.GetValue()):
            message += "Album Location not set\n"
        if not len(self.photo_files):
            message += "No Photos Added\n"
        return message

    def validate_album(self):
        message = self.get_validation()
        if message:
            dial = wx.MessageDialog(None, message, 'Warning', wx.OK | wx.ICON_EXCLAMATION)
            dial.ShowModal()
            return False
        return True

class NewAlbumDialog(BaseAlbumDialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: NewAlbumDialog.__init__
        BaseAlbumDialog.__init__(self, *args, **kwds)
        self.start_layout()

    def _set_properties(self):
        # begin wxGlade: NewAlbumDialog.__set_properties
        self.SetTitle("New Album")
        self.SetSize((250, 400))
        # end wxGlade

    def _do_layout(self):
        # begin wxGlade: NewAlbumDialog.__do_layout
        album_dialog_sizer = wx.BoxSizer(wx.VERTICAL)
        album_location_sizer = wx.BoxSizer(wx.HORIZONTAL)
        album_dialog_sizer.Add(self.album_name_label, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 2)
        album_dialog_sizer.Add(self.album_name_text, 0, wx.LEFT | wx.RIGHT | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        album_dialog_sizer.Add(self.album_description_label, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 2)
        album_dialog_sizer.Add(self.album_description_text, 1, wx.LEFT | wx.RIGHT | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        album_location_sizer.Add(self.album_location_label, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)
        album_location_sizer.Add(self.album_location_text, 1, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)
        album_dialog_sizer.Add(album_location_sizer, 0, wx.ALL | wx.EXPAND, 2)
        album_dialog_sizer.Add(self.set_album_location_button, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 25)
        album_dialog_sizer.Add(self.photos_list_box, 1, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        album_dialog_sizer.Add(self.add_photos_button, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 25)
        album_dialog_sizer.Add(self.setup_album_button, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 3)
        self.SetSizer(album_dialog_sizer)
        self.Layout()
        # end wxGlade

class AddSubalbumDialog(BaseAlbumDialog):
    def __init__(self, *args, **kwds):
        BaseAlbumDialog.__init__(self, *args, **kwds)


        self.parent_album_name_label = wx.StaticText(self, -1, "Parent Album Name:")
        self.parent_album_name_text = wx.TextCtrl(self, -1, "")


        self.start_layout()

    def _set_properties(self):
        # begin wxGlade: NewAlbumDialog.__set_properties
        self.SetTitle("Add Subalbum")
        self.SetSize((250, 450))
        # end wxGlade

    def _do_layout(self):
        # begin wxGlade: NewAlbumDialog.__do_layout
        album_dialog_sizer = wx.BoxSizer(wx.VERTICAL)
        album_location_sizer = wx.BoxSizer(wx.HORIZONTAL)
        album_dialog_sizer.Add(self.parent_album_name_label, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 2)
        album_dialog_sizer.Add(self.parent_album_name_text, 0, wx.LEFT | wx.RIGHT | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        album_dialog_sizer.Add(self.album_name_label, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 2)
        album_dialog_sizer.Add(self.album_name_text, 0, wx.LEFT | wx.RIGHT | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        album_dialog_sizer.Add(self.album_description_label, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 2)
        album_dialog_sizer.Add(self.album_description_text, 1, wx.LEFT | wx.RIGHT | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        album_location_sizer.Add(self.album_location_label, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)
        album_location_sizer.Add(self.album_location_text, 1, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)
        album_dialog_sizer.Add(album_location_sizer, 0, wx.ALL | wx.EXPAND, 2)
        album_dialog_sizer.Add(self.set_album_location_button, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 25)
        album_dialog_sizer.Add(self.photos_list_box, 1, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        album_dialog_sizer.Add(self.add_photos_button, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 25)
        album_dialog_sizer.Add(self.setup_album_button, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 3)
        self.SetSizer(album_dialog_sizer)
        self.Layout()
        # end wxGlade

    def setup_album(self):
        self.album = Album( self.parent, self.album_name_text.GetValue(),  self.album_location_text.GetValue(), self.parent_album_name_text.GetValue() )
        self.album.set_description( self.album_description_text.GetValue() )

    def get_validation(self):
        message =  BaseAlbumDialog.get_validation(self)
        if not self.parent_album_name_text.GetValue() or not len(self.parent_album_name_text.GetValue()):
            message = "Parent Album Name not set\n" + message
        return message
    
    def validate_album(self):
        message = self.get_validation()
        
        
        if message:
            dial = wx.MessageDialog(None, message, 'Warning', wx.OK | wx.ICON_EXCLAMATION)
            dial.ShowModal()
            return False
        return True

class Photo:
    def __init__(self, album=None,location=None, name=""):
        self.img = None
        self.wx_img = None
        self.summary = ""
        self.description = "" 
        self.timestamp = ""
        self.tags = []
        if location:
            self.set_location(location)
        self.set_name(name)
        self.album = album       
        

    def set_location(self, location):
        self.location = location
        self.img = PIL.Image.open(location)
        dt = datetime.strptime( self.get_exif(self.img)['DateTime'], '%Y:%m:%d %H:%M:%S' )
        print location, dt
        self.timestamp = dt.strftime( '%Y-%m-%d %H:%M:%S' )
        print self.timestamp
        """
        image = wx.EmptyImage(self.img.size[0],self.img.size[1])
        image.SetData(self.img.convert("RGB").tostring())
        image.SetAlphaData(self.img.convert("RGBA").tostring()[3::4] )
        """
        image = wx.EmptyImage(self.img.size[0], self.img.size[1])
        image.SetData(self.img.convert("RGB").tostring())
        self.wx_img = image
        

    def get_location(self):
        return self.location

    def set_name(self, name):
        self.name = name
        self.set_webname( name.replace(' ', '_').lower() )

    def get_name(self):
        return self.name

    def set_webname(self, name):
        self.webname = name

    def get_webname(self):
        return self.webname

    def set_description(self, description):
        self.description = description

    def get_description(self):
        return self.description

    def set_summary(self, summary):
        self.summary = summary

    def get_summary(self):
        return self.summary

    def add_tag(self, tag):
        self.tags.append(tag)

    def add_tags(self, tags):
        self.tags.extend(tags)

    def get_tags(self):
        return self.tags

    def remove_tag(self, tag):
        self.tags.remove(tag)

    def remove_tags(self, tags):
        self.tags = list( set(self.tags) - set(tags) )


    def __repr__(self):
        return self.location + ":" + self.name

    def get_pil_image(self):
        return self.img

    def get_wx_image(self):
        return self.wx_img

    def generate(self):
        if len(self.webname) == 0:
            self.name = os.path.split(self.location)[1]
            self.webname = self.name.replace(' ', '_').lower()
        h_name = self.webname + '_high.jpg'
        w_name = self.webname + '_web.jpg'
        photo_image = '[![%s]([[!!%s]])]([[!!%s]])' % (self.name, os.path.join(gallery_dir,self.album.get_webname(), w_name), os.path.join(gallery_dir,self.album.get_webname(), h_name)) # this is the watermarked image with the link to the hd image
        tag_string = '\n'.join( set( [ '    -'+x for x in self.tags ]  ) )
        d= {'photo_name':self.name, 'photo_summary': self.summary, 'photo_description': self.description, 'photo_timestamp': self.timestamp, 'image_name': self.webname, 'photo_image':photo_image, 'photo_tags':tag_string }
        #print photo_template.substitute(d)
        f = open(os.path.join(self.album.location,  self.webname + '.html'), 'w')
        f.write( photo_template.substitute(d) )
        f.close()
        hi = self.get_high_res()
        wi = self.get_watermarked()
        hi.save( os.path.join(self.album.media_location, h_name) )
        wi.save( os.path.join(self.album.media_location, w_name) )


    def get_exif(self, img):
        ret = {}
        info = img._getexif()
        for tag, value in info.items():
            decoded = TAGS.get(tag, tag)
            ret[decoded] = value
        return ret

    def get_high_res(self):
        wpercent = (high_basewidth / float(self.img.size[0]))
        hsize = int((float(self.img.size[1]) * float(wpercent)))
        high_img = self.img.resize((high_basewidth, hsize), PIL.Image.ANTIALIAS)
        return high_img

    def get_watermarked(self, text='\xa9 Justin Judd'):
        wpercent = (web_basewidth / float(self.img.size[0]))
        hsize = int((float(self.img.size[1]) * float(wpercent)))
        img = self.img.resize((web_basewidth, hsize), PIL.Image.ANTIALIAS)
        watermark = Image.new("RGBA", (img.size[0], img.size[1]))
        draw = ImageDraw.ImageDraw(watermark, "RGBA")
        size = 0
        while True:
            size += 1
            nextfont = ImageFont.truetype(FONT, size)
            nexttextwidth, nexttextheight = nextfont.getsize(text)
            if nexttextwidth+nexttextheight/3 > watermark.size[0]:
                break
            font = nextfont
            textwidth, textheight = nexttextwidth, nexttextheight
        draw.setfont(font)
        draw.text(((watermark.size[0]-textwidth)/2,
                   (watermark.size[1]-textheight)/2), text)
        watermark = watermark.rotate(degrees(atan(float(img.size[1])/
                                                  img.size[0])),
                                     Image.BICUBIC)
        mask = watermark.convert("L").point(lambda x: min(x, 55))
        watermark.putalpha(mask)
        img.paste(watermark, None, watermark)
        return img



class Album:

    def __init__(self, frame=None, name="", location="", parent=""):
        self.photos = []
        self.frame = frame
        self.set_name(name)   
        self.cover = 0
        self.description = ""
        if parent:
            self.parent = parent.replace(' ', '_').lower()
        else:
            self.parent = ""
        self.location = os.path.join(location, gallery_dir, self.parent, self.webname)
        self.media_location = os.path.join(location, media_dir, gallery_dir, self.parent, self.webname )

    def set_name(self, name):
        self.name = name
        self.set_webname( name.replace(' ', '_').lower() )

    def get_name(self):
        return self.name

    def set_webname(self, name):
        self.webname = name

    def get_webname(self):
        return self.webname

    def set_description(self, desc):
        self.description = desc

    def get_description(self):
        return self.description

    def set_cover(self, index):
        if index < 0 or index > len(self.photos):
            return False
        self.cover = index

    def get_cover(self):
        return self.cover

    def add_photo(self, photo):
        self.photos.append(photo)

    def add_photos(self, photos):
        self.photos.extend(photos)

    def get_photos(self):
        return photos

    def generate(self):
        #create directory for album for photos and also the directory for the content
        dlg = wx.ProgressDialog("Generating Album", "Please wait while the album is being generated", maximum = len(self.photos)+2,parent=self.frame, 
                                style = wx.PD_CAN_ABORT| wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME |  wx.PD_REMAINING_TIME )
        os.makedirs( self.location )
        os.makedirs( self.media_location )
        d= {'album_name':self.name, 'album_description': self.description, 'album_cover': self.photos[self.cover].get_webname() }

        f = open(os.path.join( self.location ,'index.html'), 'w')
        f.write( album_template.substitute(d) )
        f.close()

        wx.Yield()

        f = open( os.path.join( self.location, 'meta.yaml') , 'w')
        f.write( meta_template.substitute(d) )
        f.close()

        wx.Yield()

        for p in self.photos:
            p.generate()
            wx.Yield()

        dlg.Destroy()
        

# end of class NewAlbumDialog
if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame = AlbumCreator(None, -1, "")
    app.SetTopWindow(frame)
    frame.Show()
    app.MainLoop()
